// Todo: Check if empty block handling is equivalent across traversals
// Todo: Add node locations to new nodes in traversals and check if accurate
// Todo: Check if all constant links are correct in all traversals

start phase RootPhase {
    actions {
        pass SPdoScanParse;
        SymbolTables;
        VarInitsToAssignments;
        TypeChecking;
        ForCheck;
        ForToWhile;
        ConstantTable;
        BoolopsToCondops;
        BooleanCasts;
        Print;
        Assembler;
    }
};

traversal SymbolTables {
    uid = ST,
    nodes = {
        Program, GlobDef, GlobDecl, FunDef,
        VarDecl, Varlet, Var, FunCall, Param, For, Ste
    },
    // Could make a stack with ptrs to tables when implementing nested functions.
    travdata {
        user node_ptr current_scope,
        int nest_lvl,
        int index_extern_fun,
        int index_extern_var,
        int index_var,
        int index_fun,
        //int index_local,
        string entry_name,
        user node_ptr link_ste,
        user node_ptr function_ste,
        bool globals_finished
    }
};

traversal VarInitsToAssignments {
    uid = VITA,
    nodes = {
        Globdef, Program, FunDef, VarDecl, FunBody, Ste
    },
    travdata {
        user node_ptr init_funbody,
        user node_ptr last_stmts_init,
        user node_ptr link_ste,
        user node_ptr current_scope,
        user node_ptr init_fundef,
        user node_ptr last_stmts_local,
        user node_ptr first_stmts_local,
        string entry_name // dit is naam van de var die opgezocht wordt om te linken bij het splitsen
    }
};

traversal TypeChecking {
    uid = TC,
    nodes = {
        FunDef, For, Cast, FunCall, Var, Float, Bool, Num,
        Binop, Monop, Assign, IfElse, Return, Param
    },
    travdata {
        user node_ptr for_counter,
        Type return_type,
        Type current_type,
        bool bool_return
    }
};

traversal ForCheck {
    uid = FC,
    nodes = {
        For, VarLet, Ste
    },
    travdata {
        int for_loops,
        user node_ptr current_scope,
        string var_name
    }
};

traversal ForToWhile {
    uid = FTW,
    nodes = {
        Fundef, FunBody, VarDecl, Stmts, For, Ste
    },
    travdata {
        user node_ptr cur_function,
        user node_ptr last_vardecl,
        user node_ptr last_ste,
        user node_ptr last_stmts,
        user node_ptr head_new,
        user node_ptr tail_new,
        user node_ptr insert,
        int counter
    }
};

traversal ConstantTable {
    uid = CST,
    nodes = {
        Program, Num, Float, Cte
    },
    travdata {
        int index,
        user node_ptr tail,
        user node_ptr program,
        user node_ptr cur_const,
        Type cur_type
    }
};

traversal BoolopsToCondops {
    uid = BTC,
    nodes = {
        Binop
    }
};

traversal BooleanCasts {
    uid = BC,
    nodes = {
        Cast, FunCall, Var,
        Binop, Monop, Float, Bool, Num
    },
    travdata {
        Type expr_type
    }
};

traversal Assembler {
    uid = AS,
    travdata {
        int cur_lvl,
        int tag_index,
        bool init,
        bool returned,
        int local_vars
    }
};

traversal Print {
    uid = PRT
};


enum Type {
    // T_ collides with bison/flex generated stuff.
    prefix = CT,
    values {
        int, float, bool, void
    }
};

enum monop_type {
    prefix = MO,
    values {
        not, neg
    }
};

enum binop_type {
    prefix = BO,
    values {
        add, sub, mul, div, mod, lt, le, gt, ge, eq, ne,
        and, or
    }
};

nodeset Constants = {Float, Bool, Num};

nodeset Operations = {Binop, Monop, Ternary};

nodeset Decl = {GlobDef, GlobDecl, FunDef};

nodeset Vars = {VarDecl, Var, VarLet};

nodeset Expr = {Cast, FunCall, Var, ArrExpr} | (Constants | Operations);

nodeset Stmt = {Assign, ExprStmt, IfElse, While, DoWhile, For, Return};

nodeset Link = {Ste};
nodeset Link_cte = {Cte};

root node Program {
    children {
        Decls decls { constructor, mandatory },
        Symtable global { constructor },
        Cte constants { constructor }
    }
};

node Decls {
    children {
        Decl decl { constructor, mandatory },
        Decls next { constructor }
    }
};

node Exprs {
    children {
        Expr expr { constructor, mandatory },
        Exprs next { constructor }
    }
};

node ArrExpr {
    children {
        Exprs exprs { constructor, mandatory }
    }
};

node Ids {
    children {
        Ids next { constructor }
    },
    attributes {
        string name { constructor }
    }
};

node ExprStmt {
    children {
        Expr expr { constructor, mandatory }
    }
};

node Return {
    children {
        Expr expr { constructor }
    }
};

node FunCall {
    children {
        Exprs args { constructor }
    },
    attributes {
        string name { constructor },
        Link ste { constructor }
    }
};

node Cast {
    children {
        Expr expr {constructor, mandatory }
    }, 
    attributes {
        Type type { constructor }
    }
};

node FunDefs {
    children {
        FunDef fundef { constructor, mandatory },
        FunDefs next { constructor }
    }
};

node FunDef {
    children {
        FunBody body { constructor },
        Param params { constructor },
        Symtable symtable { constructor }
    },
    attributes {
        Type type { constructor },
        string name { constructor },
        bool export  { constructor },
        bool extern_bool { constructor },
        Link ste { constructor }
    }
};

node FunBody {
    children {
        VarDecl decls { constructor },
        FunDefs local_fundefs { constructor },
        Stmts stmts { constructor }
    }
};

node IfElse {
    children {
        Expr cond { constructor, mandatory },
        Stmts then { constructor },
        Stmts else_block { constructor }
    }
};

node While {
    children {
        Expr cond { constructor, mandatory },
        Stmts block { constructor, mandatory }
    }
};

node DoWhile {
    children {
        Expr cond { constructor, mandatory },
        Stmts block { constructor,mandatory }
    }
};

node For {
    children {
        Expr start_expr { constructor, mandatory },
        Expr stop { constructor, mandatory },
        Expr step { constructor },
        Stmts block { constructor },
        Symtable symtable { constructor }
    },

    attributes {
        string var { constructor }
    }
};

node GlobDecl {
    children {
        Ids dims { constructor }
    },

    attributes {
        Type type { constructor },
        string name { constructor }
    }
};

node GlobDef {
    children {
        Exprs dims { constructor },
        Expr init { constructor }
    },

    attributes {
        Type type { constructor },
        string name { constructor },
        bool export { constructor }
    }
};

node Param {
    children {
        Ids dims { constructor },
        Param next { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor }
    }
};

node VarDecl {
    children {
        Exprs dims { constructor },
        Expr init { constructor },
        VarDecl next { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor }
    }
};

node Stmts {
    children {
        Stmt stmt { constructor, mandatory },
        Stmts next { constructor }
    }
};

node Assign {
    children {
        VarLet let { constructor, mandatory },
        Expr expr { constructor, mandatory }
    }
};

node Ternary {
    children {
        Expr pred { constructor, mandatory },
        Expr then_ { constructor, mandatory },
        Expr else_ { constructor, mandatory }
    }
};

node Binop {
    children {
        Expr left { constructor, mandatory },
        Expr right { constructor, mandatory }
    }, 

    attributes {
        binop_type op { constructor },
        Type expr_type { constructor }
    }
};


node Monop {
    children {
        Expr operand { constructor, mandatory }
    },

    attributes {
        monop_type op { constructor },
        Type expr_type { constructor }
    }
};

node VarLet {
    children {
        Exprs indices { constructor }
    }, 

    attributes {
        string name { constructor },
        Link ste { constructor }
    }
};


node Var {
    children {
        Exprs indices { constructor }
    }, 

    attributes {
        string name { constructor },
        Link ste { constructor }
    }
};

node Num {
    attributes {
        int val { constructor },
        Link_cte cte { constructor }
    }
};

node Float {
    attributes {
        float val { constructor },
        Link_cte cte { constructor }
    }
};

node Bool {
    attributes {
        bool val { constructor }
    }
};

node Symtable {
    children {
        Ste next { constructor }
    },

    attributes {
        int nest_lvl { constructor },
        Link parent { constructor },
        Link tail { constructor },
        int next_index { constructor }
    }
};

node Ste {
    children {
        Ste next { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor },
        bool function { constructor },
        int arity { constructor },
        Link first_param { constructor },
        int nest_lvl { constructor },
        int index { constructor },
        bool extern_bool { constructor },
        bool export { constructor }
    }
};

node Cte {
    children {
        Cte next { constructor }
    },

    attributes {
        int index { constructor },
        Type type { constructor },
        int int_val { constructor },
        float float_val { constructor }
    }
}
